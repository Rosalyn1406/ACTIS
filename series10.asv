load R1.mat
x= R1.xT0;
y= R1.yR10;

%log scale x axis
logx=log10(x);

%% Curve Fit
% polyval:evaluate polynomial at some point x
% polyint:integrate polynomial
% polyder:derivative of polynomial
% roots: return roots of a polynomial
% conv: multiply two polynomial
% deconv: divide two polynomial
% polyfit: least-squares polynomial curve fit

%fitting to eight degree
% coefficeint
p10=polyfit(logx,y,8)
%disp([num2str(p3(1)) 'x^8+' num2str(p3(2)) 'x^7+' num2str(p3(3)) 'x^6+' num2str(p3(4))'x^5+' num2str(p3(5))'x^4+' num2str(p3(6))'x^3+' num2str(p3(7))'x^2+' num2str(p3(8)) 'x+' num2str(p3(9))'])

% Fitting
x_fit=linspace(-2,4);
y_fit = polyval(p10,x_fit);

%% plotting
figure(10)
plot(logx,y,'bo')
hold on;
plot(x_fit,y_fit,'r')
hold off;
ylim([-0.2 1.2]) 
xlim([-1.9 3.333333])
grid on
title("R vs [T]_0 for K_d=50pM, L_0/K_d=167")
xlabel("[T]_{0}/K_{d}")
ylabel("R_{9}")
yline(0.5,"-.m","R_9=0.5")
legend("data","fit(8th degree)")

%% Derivation
deri=polyder(p10)

% Checking value of y when x is ..
x1=[2.8685] 
y1=polyval(p10,x1) % value is correct 

% slope, x value of y =0.5 is input into derivation
x_point=[2.8685]
y_p8_slope=polyval(deri,x_point)

%% Roots
p=[ -0.0001    0.0001    0.0002   -0.0011   -0.0012    0.0000   -0.0015   -0.0018  0.4996];
r=roots(p)

% sub x value into derivative(method 2 of finding slope)
slope=polyval(deri,2.8685) % 0.0032 is the x value for y =0.5